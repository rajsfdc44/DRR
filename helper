/******************************************************************************************
* Component:      VPS_QuoteWorklist_LightningDatatable
* @description    This class is used by the full worklist components and is in charge of 
*                 searching for the user's quotes and displaying them with the desired 
*                 filters and input
****************************************************************************************************************
Change Log:
11-OCT-2019      Anthony        	   Replace values for product offerings 
15-OCT-2019      Edward Nguyen 		   PMD improved
****************************************************************************************************************/
({
    getServLocFilterData : function(component, event, helper){
        var action = component.get('c.getSrvLocAddrActionLst');
        console.log("getServLocFilterData");
        
        action.setCallback(this, function(response){
            var state = response.getState();
            console.log("state1Helper"+state);
            if (state === "SUCCESS") {
                var res = response.getReturnValue();
                var arr = [];
                var strArr = [];
               // arr = [{ label: 'All',checked: true,name:'all'}];
                
                for(var i=0;i<res.length;i++){
                    if(!$A.util.isEmpty(res[i].uspsAddressExternal__c)){
                        strArr.push(res[i].uspsAddressExternal__c);
                        //arr.push({label: res[i].uspsAddressExternal__c,checked:false,name: res[i].uspsAddressExternal__c});
                    }else{
                        strArr.push(String(res[i]));
                        //arr.push({label: res[i],checked:false,name: res[i]});
                    }
                }
                var filteredArray = strArr.filter(function(item, pos){
                    return strArr.indexOf(item)== pos;
                });
                console.log('filteredArray =====> '+filteredArray);
                for(var j=0;j<filteredArray.length;j++){  
                    arr.push({label: filteredArray[j],checked:false,name: filteredArray[j]});                    
                }
                
                var listOfLabels = [];
                for(var k=0; k<arr.length;k++){
                    listOfLabels.push(arr[k].label);
                }
                var sortedlabels = listOfLabels.sort();
                var finalset = [{ label: 'All',checked: true,name:'all'}];
                for(var n=0;n<sortedlabels.length;n++){                    
                    for(var o=0; o<arr.length;o++){                        
                        if(arr[o].label == sortedlabels[n]){
                            finalset.push(arr[o]);
                        }
                    }                    
                }
                arr = finalset;
                console.log('sortedlabels--'+JSON.stringify(arr));
                
                component.set("v.srvLocFilterLst",arr);
                console.log('GET --srvLocFilterLst'+ component.get("v.srvLocFilterLst"));
                this.getgroupFilterdata(component, event, helper);
                //helper.fetchQuoteHelper(component, event, helper);
            }
        });
        $A.enqueueAction(action);        
    },
    getgroupFilterdata: function(component, event, helper){
        var action = component.get('c.getgroupActionLst');
        console.log("getgroupFilterdata");
        action.setCallback(this, function(response){
            var state = response.getState();
            console.log("state1Helpergrp"+state);
            if (state === "SUCCESS") {
                var res = response.getReturnValue();
                console.log("response "+res);
                var grplst = [];
                var strArr = [];
                for(var i=0;i<res.length;i++){
                    if(!$A.util.isEmpty(res[i].GroupName__c)){
                        strArr.push(res[i].GroupName__c);
                    }
                }
                for(var j=0;j<strArr.length;j++){  
                    grplst.push({label: strArr[j],checked:false,name: strArr[j]});                    
                }
                var finalset = [{ label: 'All',checked: true,name:'all'}];
               // var finalset = [];

                for(var o=0; o<grplst.length;o++){
                    finalset.push(grplst[o]);
                }
                grplst = finalset;
                console.log('groupfilerlist--'+JSON.stringify(grplst));
                component.set("v.groupFilterLst",grplst);
               console.log('GET --groupFilterLst'+ component.get("v.groupFilterLst"));
                 this.fetchQuoteHelper(component, event, helper);
                //helper.fetchQuoteHelper(component, event, helper);
            }
        });
        $A.enqueueAction(action);
    },
    fetchQuoteHelper : function(component, event, helper) {
        console.log('Inside Fetch Quote Helper');
        var headerActions = [
            { label: 'All',checked: true,name:'all'},
			{ label: 'Cancelled', checked: false, name:'Cancelled'},
			{ label: 'Complete', checked: false, name:'Complete'},
            { label: 'Expired', checked: false, name:'Expired'},
			{ label: 'Finalized', checked: false, name:'Finalized'},			
            { label: 'Open',checked: false,name:'Open'},
            { label: 'Pricing Review', checked: false, name:'Pricing Review'},
            { label: 'Pricing Updated', checked: false, name:'Pricing Updated'},
            { label: 'Submitted', checked: false, name:'Submitted'}
        ];
        // Changes for User Story VPSCX-6774
        var productHeader = [
            { label: 'All',checked: true,name:'all'},
			{ label: 'Dedicated E-Line', checked: false, name:'Dedicated E-Line'},
			{ label: 'Internet Dedicated +', checked: false, name:'Internet Dedicated +'},//VRD changes
			{ label: 'Internet Dedicated Access', checked: false, name:'Internet Dedicated Access'},
			{ label: 'Internet Dedicated Ethernet', checked: false, name:'Internet Dedicated Ethernet'},
            //{ label: 'Internet Dedicated Services', checked: false, name:'Internet Dedicated Services'},
			{ label: 'Private IP', checked: false, name:'Private IP'},
			{ label: 'Private Line', checked: false, name:'Private Line'},
			{ label: 'Switched E-LAN', checked: false, name:'Switched E-LAN'},
            { label: 'Switched E-Line', checked: false, name:'Switched E-Line'},
            { label: 'Wavelength Solutions', checked: false, name:'Wavelength Solutions'}
            
        ];
        var productOfferingHeader = [
        { label: 'All',checked: true,name:'all'},
			{ label: 'EVC Standalone', checked: false, name:'EVC Standalone'},
			{ label: 'IDE - Burstable', checked: false, name:'IDE - Burstable'},//VRD changes
            { label: 'IDE - Tiered', checked: false, name:'IDE - Tiered'},//VRD changes
            { label: 'IDE - Essential', checked: false, name:'IDE - Essential'},//VRD changes
            { label: 'IDS - Burstable', checked: false, name:'IDS - Burstable'},//VRD changes
            { label: 'IDS - Tiered', checked: false, name:'IDS - Tiered'},//VRD changes
            { label: 'IDS - Essential', checked: false, name:'IDS - Essential'},//VRD changes
			{ label: 'Internet Dedicated Access', checked: false, name:'Internet Dedicated Access'},
            { label: 'Internet Dedicated Ethernet', checked: false, name:'Internet Dedicated Ethernet'},
			{ label: 'NNI Port & Access', checked: false, name:'NNI Port & Access'},
			{ label: 'NNI Port Only', checked: false, name:'NNI Port Only'},
            { label: 'NNI Standalone', checked: false, name:'NNI Standalone'},
			{ label: 'PIP Port & Access',checked: false,name:'PIP Port & Access'},
			{ label: 'Point to Multipoint',checked: false,name:'Point to Multipoint'},
			{ label: 'Point to Mux/Hub', checked: false, name:'Point to Mux/Hub'},
			{ label: 'Point to Point', checked: false, name:'Point to Point'},
            { label: 'Switched E-LAN', checked: false, name:'Switched E-LAN'},
            { label: 'TLS',checked: false,name:'TLS'},
            { label: 'UNI/EVC Combo', checked: false, name:'UNI/EVC Combo'}, 
            /*{ label: 'UNI EVC', checked: false, name:'UNI EVC'},*/ // Changed for 2969_ITR_revert
            { label: 'UNI Standalone', checked: false, name:'UNI Standalone'},
            { label: 'Dedicated E-Line Services', checked: false, name:'Dedicated E-Line Services'},
            { label: 'Internet Dedicated Ethernet Services', checked: false, name:'Internet Dedicated Ethernet Services'},            
            { label: 'PIP Services', checked: false, name:'PIP Services'},
            { label: 'Switched E-Line Services', checked: false, name:'Switched E-Line Services'},
            { label: 'Wavelength Solutions', checked: false, name:'Wavelength Solutions'}
            /*{ label: 'ERS PREMIER EVC', checked: false, name:'ERS PREMIER EVC'},
			  { label: 'UNI EVC', checked: false, name:'UNI EVC'},*/
        ];
        // End changes
        var iconNameVal = component.get("v.QuoteNameIcon");
      //  var sortIcon = $A.get('$Resource.VPS_Sort_SVG');
        var servLocAddrLst = component.get("v.srvLocFilterLst");
        var groupNameLst = component.get("v.groupFilterLst");
        console.log('group list---'+JSON.stringify(groupNameLst));
        var cols = [];
        cols.push(
            /*{label: ' ', 
                fieldName: 'VPS_QuoteFlag__c' ,
                sortable:true,   
                type: 'button', 
                //iconName: 'utility:sort', 
                typeAttributes: {
                    label: { fieldName: 'Flag' }, 
                    //target: '_self',//'_blank',
                    //iconName: 'utility:sort',
                    class: 'redFlag',
                    iconName: 'redc'
                },*/
               /* cellAttributes:{
                    class: { fieldName: 'displayClass' }, 
                    iconName: { fieldName: 'flagIconName' }, 
                    iconPosition: 'right', 
                    iconcolor: {fieldName: 'flagIconColor'} 
                },
                initialWidth: 50
            },*/
            {label: ' ',
                fieldName: 'VPS_QuoteFlag__c',
                sortable: true,
                type: 'button',
                typeAttributes: {
                    name: 'flagClick',
                    iconName: {fieldName: 'flagIconName'},
                    iconPosition: 'right',
                    iconcolor: {fieldName: 'flagIconColor'},
                    class: {fieldName: 'displayClass'}
                },
                initialWidth: 50
            },
            /*{label: 'Group Name', 
                fieldName: 'Grouplink', 
                type: 'url',
                    title:  'Group Name',
                sortable:true,   
             	wrapText: false,
                iconName: 'utility:sort',
                iconPosition: 'right', 
                typeAttributes: {
                    label: { fieldName: 'GroupName__c' }, 
                    tooltip: {  fieldName: 'GroupName__c'},
                    target: '_self',//'_blank',
                }, 
                cellAttributes: {
                    class: { fieldName: 'displayClass' } ,
                    style:'font-weight:normal !important;font-family:NeueHaasGroteskText,sans-serif !important;', 
                    iconName: { fieldName: 'utility:filter' },
                    iconLabel: { fieldName: 'flagIconLabel1' },
                    iconPosition: 'right'
                    }, 
                actions: groupNameLst,
                initialWidth: 170,
                hideDefaultActions: true
              //initialWidth: 190
            },*/
            {label: 'Quote Name', 
                fieldName: 'linkName', 
                type: 'url',
                    title:  'Name',
                //  fieldLabel:'Name',
                sortable:true,   
                iconName: iconNameVal,
                typeAttributes: {
                    label: { fieldName: 'Name' }, 
                    tooltip: {  fieldName: 'Name'},
                    target: '_self',//'_blank',
                }, 
                cellAttributes: {
                    class: { fieldName: 'displayClass' } ,
                    style:'font-weight:bold !important;font-family:NeueHaasGroteskDisplayBold !important;'
                }, initialWidth: 170
              //initialWidth: 190
             
             
            },
                // Changes for User Story VPSCX-6774
            {label: 'Product', 
                fieldName: 'VPS_Product_Type__c',
                type: 'text', 
                sortable:true,
                iconName: 'utility:sort',
                iconPosition: 'right', 
                cellAttributes: { 
                    class: { fieldName: 'displayClass' },
                    style:'font-weight:normal !important;font-family:NeueHaasGroteskText,sans-serif !important;',
                    iconName: { fieldName: 'utility:filter' },
                    iconLabel: { fieldName: 'flagIconLabel1' }, 
                    iconPosition: 'right'},
                actions: productHeader,
                initialWidth: 170,
             hideDefaultActions: true
                //initialWidth: 190
            },
            {label: 'Product Offering', 
                fieldName: 'ProductNameFormula__c',
                type: 'text', 
                sortable:true,
                iconName: 'utility:sort',
                iconPosition: 'right', 
                cellAttributes: { 
                    class: { fieldName: 'displayClass' },
                    style:'font-weight:normal !important;font-family:NeueHaasGroteskText,sans-serif !important;',
                    iconName: { fieldName: 'utility:filter' },
                    iconLabel: { fieldName: 'flagIconLabel1' }, 
                    iconPosition: 'right'},
                actions: productOfferingHeader, //was productNameHeader
                //initialWidth: 200
                initialWidth: 200,
             hideDefaultActions: true
            },
                // End changes
            {label: 'Location', 
                fieldName: 'Service_Location__c', 
                type: 'text', 
                sortable:true, 
                iconName: 'utility:sort',
                iconPosition: 'right', 	// Anthony
                cellAttributes: {
                    class: { fieldName: 'displayClass' },
                    style:'font-weight:normal !important;font-family:NeueHaasGroteskText,sans-serif !important;', 
                    iconName: { fieldName: 'utility:filter' },
                    iconLabel: { fieldName: 'flagIconLabel1' }, 
                    iconPosition: 'right' },
                actions: servLocAddrLst,	// Anthony
                initialWidth: 280,		// Anthony
                //initialWidth: 350
             hideDefaultActions: true
            },
            {label: 'Date', 
                fieldName: 'Creation_Date__c', 
                type: 'date-local', 
                sortable:true,
                iconName: 'utility:sort',
                typeAttributes:{
                    month: "2-digit",
                    day: "2-digit",
                    year: "2-digit"},
                cellAttributes: { 
                    class: { fieldName: 'displayClass' } ,
                    style:'font-weight:normal !important;font-family:NeueHaasGroteskText,sans-serif !important;' 
                }, 
                initialWidth: 165
            },
            {label: 'Status', 
                fieldName: 'Status', 
                type: 'text', 
                sortable:true,
                iconName: 'utility:sort', 
                cellAttributes: { 
                    class: { fieldName: 'displayClass' },
                    style:'font-weight:bold !important;font-family:NeueHaasGroteskDisplayBold !important; '  ,
                    iconName: { fieldName: 'utility:filter' },
                    iconLabel: { fieldName: 'flagIconLabel1' }, 
                    iconPosition: 'right' },
                actions: headerActions, 
                initialWidth: 175,
             hideDefaultActions: true
            }/*,           
            {label: 'Copy', 
                fieldName: 'Copy' ,
                type: 'button', 
                typeAttributes: {
                    iconName: { fieldName: 'copyIconName' },
                    iconcolor: {fieldName: 'flagIconColor'},
                    fieldName: 'Copy',name: 'copyQuote',
                    disabled:{ fieldName: 'disableCopyQuote'},
                    class: 'copyIcon'
                },
                cellAttributes:{
                    class: { fieldName: 'showCopyIcon' },
                    iconSize:'large'
                },
                initialWidth: 90
            }*/);
        //debugger;
        component.set('v.mycolumns',cols);
        var action = component.get("c.getrecords1");
        
        var searchKey = event.getParam("searchKey");
        //console.log('searchKey' + searchKey);
        action.setParams({ "searchKey": searchKey == undefined ? '' : searchKey ,
                          "rowLimit" : component.get("v.initialRows"),
                          "rowOffset" : 0});
        action.setCallback(this, function(response){
            var state = response.getState();
            console.log("state123"+state);
           // console.log('record length: ' + response.getReturnValue().quotedatalst.length);
            if (state === "SUCCESS") {
                var records =response.getReturnValue().quotedatalst;
                console.log('records were: ' , JSON.stringify(records));
                var getRows=response.getReturnValue().totalRecords;
                var listdata=[];
                var serviceAddr;
                var flagVal;
                var display;
                var showIcon;
                var disableCopyQuote;
                var navigateToUrl='';
                var dgfProducts = ["VRD Dedicated E-Line Services", "VRD Switched E-Line Services", "Switched E-LAN", "VRD Internet Dedicated Ethernet Services", "VRD PIP Services"];                
                component.set("v.totalRows",getRows);
                console.log('Total rows: ' + getRows);
                component.set("v.enableInfiniteLoading", true);
                var searchFlg = component.get("v.SearchFlg");//[SWARS][for searching in service location]
                console.log('records: ', records);
                for(var i=0; i<records.length; i++){ 
                    if(records[i].quote.ProductNameFormula__c != '' && !(dgfProducts.includes(records[i].quote.ProductNameFormula__c)) && records[i].disableCopy !=='true'){//records[i].quote.VPS_QuoteFlag__c ===true || 
                		showIcon = 'utility:copy';
                		disableCopyQuote = false;
                    } else{
                    	showIcon = '';
                    	disableCopyQuote = true;
                    }
                    display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redc' : 'blackc');
                    
                    /*
                    var loc = window.location.href;
                     // var flagType = loc.includes('Partner') ? 'redc' : 'redcUAT';
                    //showIcon=records[i].quote.VPS_QuoteFlag__c ===true ? 'utility:copy' : 'utility:copy';
                    if (loc.includes("Partner")){
                        display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redc' : 'blackc');
                    }
                    else{
                       display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redcUAT' : 'blackc');
 
                    }
                    */
                    flagVal=records[i].quote.VPS_QuoteFlag__c ===true ? 'hasFlag' : ''; 
                    //flagVal=records[i].quote.VPS_QuoteFlag__c ==- true ? 'utility:priority': ' ';                
                    if(records[i].quote.ProductNameFormula__c == 'ERS PREMIER EVC' || records[i].quote.ProductNameFormula__c == 'EVC Standalone'){
                        serviceAddr = records[i].quote.EVC_Full_Address__c == undefined ? (records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c) : records[i].quote.EVC_Full_Address__c;
                    }else{
                        serviceAddr = records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c;
                    }
                    
                    
                    // Translate Product Offering
                    helper.translateProductOffering(records[i]);
                    
                    //navigateToUrl='https://vpscx--vpscxmigra.my.salesforce.com';
                    //navigateToUrl= 'https://vpscxmigra-vpsverizon.cs2.force.com/Partner/s/resumepage?id=';
                    var frameUrl = '';
                    var pathElements = window.location.pathname.split("/");
                    if(pathElements.indexOf("Partner") != -1) {
                        frameUrl = window.location.origin + '/' + pathElements[1] + '/s/';
                    } else {
                        frameUrl = window.location.origin + '/s/';
                    } 
                    
if(records[i].quote.Omniscript_Instance_Id__c != undefined && 
                       records[i].quote.Omniscript_Instance_Id__c != null &&
                       records[i].quote.Omniscript_Instance_Id__c != '' && records[i].quote.VPS_Quote_Type__c !='QuickOrder'){
                        
                        
                        if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.Status =='Pricing Review' || records[i].quote.Status == 'Complete'|| records[i].quote.Status == 'Expired' || records[i].quote.Status == 'Pricing Updated' || records[i].quote.Status == 'Submitted')){
							//Added For LWC URL - ICB 
							if((records[i].quote.VPS_ICB__c ==true) && (records[i].quote.VPS_Quote_Type__c !='Change' )&& ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
								navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
								navigateToUrl = navigateToUrl + records[i].quote.Id;								
                            }else if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.VPS_Quote_Type__c =='Change' || records[i].quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + records[i].quote.Status;
                            }
                            else{
								navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
								navigateToUrl = navigateToUrl + records[i].quote.Id;
							}
						}
                        else{
                        //Modified the code to include quote status parameter
                        navigateToUrl = frameUrl + 'resumepage?id=';
                        navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                        navigateToUrl = navigateToUrl + '&quoteStatus=';
                        //ITR 3445 start -- to handle summary screen for completed and expired quotes
                        var qStatus =  records[i].quote.Status;
                        if(qStatus == 'Expired' || qStatus == 'Complete'){
                            qStatus = 'Submitted';
                        } 
                        navigateToUrl = navigateToUrl + qStatus;
                        //ITR 3445 end
                        }
    					if(records[i].quote.VPS_ICB__c ==true && records[i].quote.Status =='Open'){
							navigateToUrl = frameUrl + 'resumepage?id=';
                            navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                            navigateToUrl = navigateToUrl + '&quoteStatus=';
                            navigateToUrl = navigateToUrl + records[i].quote.Status;
						}
                    }
                    else if((records[i].quote.Status == 'Open' || records[i].quote.Status == 'Finalized') && records[i].quote.VPS_Quote_Type__c !='QuickOrder'){ 
                        var encodedHash = encodeURIComponent('#');
                        var encodedQuestion = encodeURIComponent('?');
                        var encodedAmp = encodeURIComponent('&');
                        var encodedFSlash = encodeURIComponent('/');
                        var encodedEqual = encodeURIComponent('=');
                        navigateToUrl = frameUrl + 'omniscriptcontainer?actionUrl=';
                        navigateToUrl = navigateToUrl + encodedFSlash + 'apex' ;
                        navigateToUrl = navigateToUrl + encodedFSlash + 'vlocity_cmt__OmniScriptUniversalPage' + encodedQuestion;
                        navigateToUrl = navigateToUrl + 'id' + encodedEqual + records[i].productId + encodedAmp;
                        navigateToUrl = navigateToUrl + 'layout' + encodedEqual + records[i].layout + encodedAmp + encodedAmp;
                        navigateToUrl = navigateToUrl + 'trackKey' + encodedEqual + records[i].trackKey + encodedAmp;
                        navigateToUrl = navigateToUrl + 'omniCancelAction' + encodedEqual + records[i].omniCancelAction + encodedAmp;
                        navigateToUrl = navigateToUrl + 'omniIframeEmbedded' + encodedEqual + records[i].omniIframeEmbedded + encodedAmp;
                        navigateToUrl = navigateToUrl + 'isdtp' + encodedEqual + records[i].isdtp + encodedAmp;
                        navigateToUrl = navigateToUrl + 'sfdcIFrameOrigin' + encodedEqual + encodeURIComponent(records[i].sfdcIFrameOrigin) + encodedAmp;
                        navigateToUrl = navigateToUrl + 'sfdcIFrameHost' + encodedEqual + records[i].sfdcIFrameHost + encodedAmp;
                        navigateToUrl = navigateToUrl + 'journeyType' + encodedEqual + 'resume' + encodedAmp;
                        navigateToUrl = navigateToUrl + 'quoteIdFromWL' + encodedEqual + records[i].quoteId + encodedAmp + encodedHash;
                        console.log('Product****'+JSON.stringify(records[i].quote.VPS_Product_Type__c));
                        /*if(records[i].quote.VPS_Product_Type__c=='Switched Eline'){
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
                        }else if(records[i].quote.VPS_Product_Type__c=='Wavelength Solutions'){
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');
                            
                        }
                        else{
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');
                            
                        }*/
						if(records[i].productCode == 'WAVE_OFR_WAVELENGTH_SOL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');										
						}else if(records[i].productCode == 'IDE_OFR_BURSTABLESELECT' || records[i].productCode == 'IDE_OFR_TIERED' || records[i].productCode == 'IDE_OFR_ESSENTIAL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDE_INSTALL_QUOTE/OmniScriptSubType/IDE/');									
						}else if(records[i].productCode == 'IDS_OFFER_IDA'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDS_UIOS/OmniScriptSubType/IDA/');									
						}else if(records[i].productCode == 'CORE_PL_OFR_PTP'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');									
						}else if(records[i].productCode == 'PIP_OFR_UNI' || records[i].productCode == 'PIP_OFR_NNI'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/PIP/');
                        }else{
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');								
						}						
                        navigateToUrl = navigateToUrl + encodeURIComponent('OmniScriptLang/English/ContextId/') + records[i].productId;
                        navigateToUrl = navigateToUrl + encodeURIComponent('/PrefillDataRaptorBundle//true');	
                    }else if (records[i].quote.VPS_ICB__c ==true && (records[i].quote.Status =='Pricing Review' || records[i].quote.Status == 'Pricing Updated' || records[i].quote.Status == 'Submitted' || records[i].quote.Status == 'Complete' || records[i].quote.Status == 'Expired')) {
                        //Added For LWC URL - ICB 
						if((records[i].quote.VPS_ICB__c ==true) && (records[i].quote.VPS_Quote_Type__c !='Change')&& ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
							navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
							navigateToUrl = navigateToUrl + records[i].quote.Id;
						}else if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.VPS_Quote_Type__c =='Change' || records[i].quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + records[i].quote.Status;
                            }
                        else{
							navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
							navigateToUrl = navigateToUrl + records[i].quote.Id;
						}
                        
                    }
                    //For quick order EVPL
                    else if (records[i].quote.VPS_Quote_Type__c =='QuickOrder'){
                        navigateToUrl = frameUrl + 'evplsummary?quoteId=';
                        navigateToUrl = navigateToUrl + records[i].quote.Id;
                    }
                        else{
                            //Added For LWC URL - Surendra
                            navigateToUrl = frameUrl + 'quotesummary?quoteId=';
                            navigateToUrl = navigateToUrl + records[i].quote.Id;
                        }
                    //vrd changes starts
                    if(records[i].quote.Description == 'VRD'){
                        if(records[i].quote.ProductNameFormula__c == 'IDE - Tiered'){
                            records[i].quote.ProductNameFormula__c ='IDS - Tiered';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Burstable'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Burstable';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Essential'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Essential';
                        }
                    }
                    //vrd changes ends
                    // Commented below line because not all records were being displayed when searching
                    //if((searchFlg && serviceAddr != '') || !searchFlg){//[SWARS][for searching in service location]
                        listdata.push({
                            displayClass : display,
                            flagIconName : flagVal,
                            flagIconColor: 'red',
                            Name : records[i].quote.Name,
                            //VPS_Product_Type__c : records[i].quote.VPS_Product_Type__c,
                            VPS_Product_Type__c : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null && records[i].quote.Group__r.Catalog_Product_Relationship__r != undefined && records[i].quote.Group__r.Catalog_Product_Relationship__r != null) ? records[i].quote.Group__r.Catalog_Product_Relationship__r.Name : ((records[i].quote.Description == 'VRD')? 'Internet Dedicated +' : records[i].quote.VPS_Product_Type__c),//vrd changes
                            //ProductNameFormula__c : records[i].quote.ProductNameFormula__c,//changes done by ram.sahu
                            ProductNameFormula__c : records[i].quote.ProductNameFormula__c,
                            Service_Location__c : serviceAddr,
                            Creation_Date__c : records[i].quote.Creation_Date__c,
                            Status : records[i].quote.Status,
                            copyIconName : showIcon,
                            disableCopyQuote :disableCopyQuote,
                            Copy:records[i].quote.Id,
                            //linkName : navigateToUrl,
                            linkName : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : navigateToUrl,
                            Grouplink : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : '',
                            GroupName__c: records[i].quote.GroupName__c
                            //linkName : navigateToUrl+'a2HR0000000XKaVMAW',
                        });
                    //}//[SWARS]
                }
                component.set("v.quoteList", listdata);
                console.log('listdata was: ', listdata);
                // Robert added this so the list data can be stored in another attribute so when all is clicked, the list will return to the orginal list.
                component.set("v.allQuoteList", listdata);
                console.log("End of fetcfhquote");
            }
        });
        $A.enqueueAction(action);
    },
    
    
    //function added by Sandra for lazy loading
    loadData : function(component, event, helper) {
        console.log("Started in loaddata helper  @@@");
		component.set("v.Spinner", true); //kc									  
        var searchKey = component.get("v.filter");
        var activeFilter = component.get("v.activeFilter");
        var header = component.get("v.header");
        console.log(header);
        console.log("searchKey loadData: " + searchKey);
        var company = component.get("v.selectedCompany");
        var owner = component.get("v.selectedOwner");
        var product = component.get("v.selectedProduct");
        console.log("searchFilter: ", searchKey);
        console.log("company, owner, product: " + company + owner + product);
        return new Promise($A.getCallback(function(resolve){
            var limit = component.get("v.initialRows");
            var offset = component.get("v.currentCount");
            console.log("limit before action: ", limit);
            console.log("currentCount before action: ", offset);
            var totalRows = component.get("v.totalRows");
            
            if (company != 'None' || owner != 'None' || product != 'None'){
                //var totalFilterRows = component.get("v.totalFilterRows");
                //console.log("totalFilterRows loadMore: ", totalFilterRows);
                console.log("cx9@@");
                console.log("totalRows w/ filter: ", totalRows);
                if(limit + offset > totalRows) {
                    limit = totalRows - offset;
                }
                //console.log("filter selected");
                //console.log("filter limit: ", limit);
                //console.log("filter offset: ", offset);
                var action = component.get('c.updateRecords');
                action.setParams({"company": component.get("v.selectedCompany"),
                                  "owner": component.get("v.selectedOwner"),
                                  "product": component.get("v.selectedProduct"),
                                  "rowLimit": limit,
                                  "rowOffset": offset
                                 });  
            }
            else if(activeFilter != 'all') {
                console.log("cx10@@");
                var action = component.get("c.updateHeaderFilter");
                if(limit + offset > totalRows){
                    limit = totalRows - offset;
                }
                action.setParams({
                    "header" : header,
                    "value" : activeFilter,
                    "rowLimit" : limit,
                    "rowOffset" : offset
                });
            }
            else {
                console.log("cx11@@");
                    if(limit + offset > totalRows){
                        limit = totalRows - offset;
                    }
                    console.log("offset no filters: " + offset);
                    var action = component.get("c.getrecords1");
                    action.setParams({
                        "searchKey": searchKey == undefined ? '' : searchKey,
                        "rowLimit" : limit,
                        "rowOffset" : offset
                    });
                }
            action.setCallback(this, function(response){
                var state = response.getState();
                console.log("state: ", state);
                if(state == 'SUCCESS' && response.getReturnValue().quotedatalst != null && response.getReturnValue().quotedatalst.length > 0){
                    var oldData = component.get("v.quoteList");
                    console.log("oldData: ", oldData);
                    var newData = response.getReturnValue().quotedatalst;
                    console.log("newData: ", newData);
                    var listData = [];
                    var serviceAddr;
                    var flagVal;
                    var display;
                    var showIcon;
                    var disableCopyQuote;
                    var frameUrl = '';
                    var pathElements = window.location.pathname.split("/");
                    if(pathElements.indexOf("Partner") != -1) {
                        frameUrl = window.location.origin + '/' + pathElements[1] + '/s/';
                    } else {
                        frameUrl = window.location.origin + '/s/';
                    }
                    var navigateToUrl;
                    var dgfProducts = ["VRD Dedicated E-Line Services", "VRD Switched E-Line Services", "Switched E-LAN", "VRD Internet Dedicated Ethernet Services", "VRD PIP Services"];
                    newData.forEach(function(record){
                        if(record.quote.ProductNameFormula__c != '' && !(dgfProducts.includes(record.quote.ProductNameFormula__c)) && record.disableCopy !='true'){//record.quote.VPS_QuoteFlag__c ===true || 
	                		showIcon = 'utility:copy';
	                		disableCopyQuote = false;
                        } 
                        else{
                            showIcon = '';
                            disableCopyQuote = true;
                        }
                        //showIcon=record.quote.VPS_QuoteFlag__c ===true ? 'utility:copy' : 'utility:copy';
                        //console.log('Show icon' + showIcon);
                        display = (record.quote.VPS_QuoteFlag__c===true ? 'redc' : 'blackc');
                        flagVal=record.quote.VPS_QuoteFlag__c ===true ? 'hasFlag' : '';
                        if(record.quote.ProductNameFormula__c == 'EVC Standalone'){ // Original name was ERS PREMIER EVC
                            serviceAddr = record.quote.EVC_Full_Address__c == undefined ? '' : record.quote.EVC_Full_Address__c;
                        }else{
                            serviceAddr = record.quote.QuoteLineItems == undefined ? '' : record.quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : record.quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c;
                        }

                        // Translate Product Offering
                        helper.translateProductOffering(record);
                        
                        /* Added as part of Revamp Project - Surendra */
                        var encodedHash = encodeURIComponent('#');
                        var encodedQuestion = encodeURIComponent('?');
                        var encodedAmp = encodeURIComponent('&');
                        var encodedFSlash = encodeURIComponent('/');
                        var encodedEqual = encodeURIComponent('=');
                        if(record.quote.Omniscript_Instance_Id__c != undefined && 
                           record.quote.Omniscript_Instance_Id__c != null &&
                           record.quote.Omniscript_Instance_Id__c != ''){ 
                            if(record.quote.VPS_ICB__c==true && (record.quote.Status =='Pricing Review' || record.quote.Status == 'Pricing Updated' || record.quote.Status == 'Submitted' || record.quote.Status == 'Complete' || record.quote.Status == 'Expired')){
							//Added For LWC URL - ICB 
							if((record.quote.VPS_ICB__c==true) && (record.quote.VPS_Quote_Type__c !='Change') && ((record.ServiceType && record.ServiceType.toUpperCase().includes('VZT')) || (record.quote.VPS_ServiceType__c && record.quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
								navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
								navigateToUrl = navigateToUrl + record.quote.Id;
							}else if(record.quote.VPS_ICB__c ==true && (record.quote.VPS_Quote_Type__c =='Change' || record.quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + record.quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + record.quote.Status;
                            }
                              else{
								navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
								navigateToUrl = navigateToUrl + record.quote.Id;
							}
							}
                            else{
                            
                            //Modified the code to include quote status parameter
                            navigateToUrl = frameUrl + 'resumepage?id=';
                            navigateToUrl = navigateToUrl + record.quote.Omniscript_Instance_Id__c;
                            navigateToUrl = navigateToUrl + '&quoteStatus=';
                            navigateToUrl = navigateToUrl + record.quote.Status;
                            }
                        }
                        else if(record.quote.Status == 'Open' || record.quote.Status == 'Finalized'){					   
                            navigateToUrl = frameUrl + 'omniscriptcontainer?actionUrl=';
                            navigateToUrl = navigateToUrl + encodedFSlash + 'apex' ;
                            navigateToUrl = navigateToUrl + encodedFSlash + 'vlocity_cmt__OmniScriptUniversalPage' + encodedQuestion;
                            navigateToUrl = navigateToUrl + 'id' + encodedEqual + record.productId + encodedAmp;
                            navigateToUrl = navigateToUrl + 'layout' + encodedEqual + record.layout + encodedAmp + encodedAmp;
                            navigateToUrl = navigateToUrl + 'trackKey' + encodedEqual + record.trackKey + encodedAmp;
                            navigateToUrl = navigateToUrl + 'omniCancelAction' + encodedEqual + record.omniCancelAction + encodedAmp;
                            navigateToUrl = navigateToUrl + 'omniIframeEmbedded' + encodedEqual + record.omniIframeEmbedded + encodedAmp;
                            navigateToUrl = navigateToUrl + 'isdtp' + encodedEqual + record.isdtp + encodedAmp;
                            navigateToUrl = navigateToUrl + 'sfdcIFrameOrigin' + encodedEqual + encodeURIComponent(record.sfdcIFrameOrigin) + encodedAmp;
                            navigateToUrl = navigateToUrl + 'sfdcIFrameHost' + encodedEqual + record.sfdcIFrameHost + encodedAmp;
                            navigateToUrl = navigateToUrl + 'journeyType' + encodedEqual + 'resume' + encodedAmp;
                            navigateToUrl = navigateToUrl + 'quoteIdFromWL' + encodedEqual + record.quoteId + encodedAmp + encodedHash;
                            /*	if(records[i].quote.VPS_Product_Type__c=='Switched Eline'){ // Added By Mahesh for redirect the urls
                            alert('Copy Switched Eline');
						navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
                        }
                        else{
                                 alert('Copy Private Eline');
                          navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');
                          
                        }*/
                        /*if(record.quote.ProductNameFormula__c !== 'Wavelength Solutions'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
						}else{
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');
						}*/
						if(record.productCode == 'WAVE_OFR_WAVELENGTH_SOL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');										
						}else if(record.productCode == 'IDE_OFR_BURSTABLESELECT' || record.productCode == 'IDE_OFR_TIERED' || record.productCode == 'IDE_OFR_ESSENTIAL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDE_INSTALL_QUOTE/OmniScriptSubType/IDE/');									
						}else if(record.productCode == 'CORE_PL_OFR_PTP'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');									
						}else if(record.productCode == 'PIP_OFR_UNI' || record.productCode == 'PIP_OFR_NNI'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/PIP/');									
						}else{
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');								
						}						
                        navigateToUrl = navigateToUrl + encodeURIComponent('OmniScriptLang/English/ContextId/') + record.productId;
                        navigateToUrl = navigateToUrl + encodeURIComponent('/PrefillDataRaptorBundle//true');	
                    }
                        else if (record.quote.VPS_ICB__c==true && (record.quote.Status =='Pricing Review' || record.quote.Status == 'Pricing Updated' || record.quote.Status == 'Submitted' || record.quote.Status == 'Complete' || record.quote.Status == 'Expired')) {
                            //Added For LWC URL - ICB 
							if((record.quote.VPS_ICB__c==true) && (record.quote.VPS_Quote_Type__c !='Change') && ((record.ServiceType && record.ServiceType.toUpperCase().includes('VZT')) || (record.quote.VPS_ServiceType__c && record.quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
								navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
								navigateToUrl = navigateToUrl + record.quote.Id;
							}else if(record.quote.VPS_ICB__c ==true && (record.quote.VPS_Quote_Type__c =='Change' || record.quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + record.quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + record.quote.Status;
                            }
                            else{
									navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
									navigateToUrl = navigateToUrl + record.quote.Id;										
															
							}
                            
                        }
                        
                            else{
                                //Added For LWC URL - Surendra
                                navigateToUrl = frameUrl + 'quotesummary?quoteId=';
                                navigateToUrl = navigateToUrl + record.quote.Id;
                                
                            }
                        
                        
                        //navigateToUrl= component.get('v.DomainUrl')+'/resumepage?id=';
                        //vrd changes starts
                    if(record.quote.Description == 'VRD'){
                        if(record.quote.ProductNameFormula__c == 'IDE - Tiered'){
                            record.quote.ProductNameFormula__c ='IDS - Tiered';
                        }
                        else if(record.quote.ProductNameFormula__c == 'IDE - Burstable'){
                            record.quote.ProductNameFormula__c = 'IDS - Burstable';
                        }
                        else if(record.quote.ProductNameFormula__c == 'IDE - Essential'){
                            record.quote.ProductNameFormula__c = 'IDS - Essential';
                        }
                    }
                    //vrd changes ends
                        listData.push({
                            displayClass : display,
                            flagIconName : flagVal,
                            flagIconColor: 'red',
                            Name : record.quote.Name,
                            //VPS_Product_Type__c : record.quote.VPS_Product_Type__c,
                            VPS_Product_Type__c : (record.quote.Group__r != undefined && record.quote.Group__r != null && record.quote.Group__r.Catalog_Product_Relationship__r != undefined && record.quote.Group__r.Catalog_Product_Relationship__r != null) ? record.quote.Group__r.Catalog_Product_Relationship__r.Name : ((record.quote.Description == 'VRD')? 'Internet Dedicated +' : record.quote.VPS_Product_Type__c),//vrd changes
                            //ProductNameFormula__c : record.quote.ProductNameFormula__c,//changes done by ram.sahu
                            ProductNameFormula__c : record.quote.ProductNameFormula__c,
                            Service_Location__c : serviceAddr,
                            Creation_Date__c : record.quote.Creation_Date__c,
                            Status : record.quote.Status,
                            copyIconName : showIcon,
                            disableCopyQuote :disableCopyQuote,
                            Copy : record.quote.Id,
                            //linkName : navigateToUrl,
                            linkName : (record.quote.Group__r != undefined && record.quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +record.quote.Group__r.Group_Id__c) : navigateToUrl,
                            Grouplink : (record.quote.Group__r != undefined && record.quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +record.quote.Group__r.Group_Id__c) : '',
                            GroupName__c : record.quote.GroupName__c
                        });
                        
                    });
                    resolve(listData);
                    var currentCount = component.get("v.currentCount");
                    currentCount += component.get("v.initialRows");
                    //set the current count with number of records loaded
                    component.set("v.currentCount",currentCount);
                }
                else
                {
                    console.log('State was: ' + state);
                }
				component.set("v.Spinner", false); //kc									   
            });
            $A.enqueueAction(action);
        }));
    }, 
	
    
    sortData : function (component, fieldName, sortDirection) {
        
        /* 
         * This method takes the fieldName that the user has selected and the 
         * sortDirection boolean, determining which way the records will be listed
         * and calls on sortBy() to sort the data. */
        
        var data = component.get("v.quoteList");
        var reverse = sortDirection !== 'asc';
      /*  fieldName = (fieldName == 'linkName') ? 'Name' : fieldName; */    // Handle Hyperlink field
        fieldName = (fieldName == 'linkName') ? 'Name' : (fieldName == 'VPS_QuoteFlag__c') ? 'flagIconName' : (fieldName == 'Grouplink') ? 'GroupName__c' : fieldName;
        console.log('fieldName---'+fieldName);
        data.sort(this.sortBy(fieldName, reverse));
        component.set("v.quoteList", data);
        console.log("v.quoteList", data);
    },
    
    
    sortBy: function (field, reverse, primer) {
        
        /* 
         * This method takes the field and order to sort the data. And returns the ordered list */
        
        var key = primer
        ? function(x) {
            return primer(x[field]);
        }
        : function(x) {
            return x[field];
        };
        reverse = !reverse ? 1 : -1;
        return function(a, b) {
            //return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
            return (
                (a = key(a) ? key(a) : ""),
                (b = key(b) ? key(b) : ""),
                reverse * ((a > b) - (b > a))
                // reverse * ((a.toLowerCase() > b.toLowerCase()) - (b.toLowerCase() > a.toLowerCase()))
            );
        };
    },
    
    
    
       //Adding this function for Download Worklist functionality
    downloadQuotes : function(component, quoteList, helper) {
        
        //check if quoteList is null, then return from function
        if (quoteList == null || !quoteList.length) {
            return null;
        }        
        
        //declare variables
        var csvStringResult, counter, keys, headers;
        
        //store fields' API Names as keys
        keys = ["flagIconName","GroupName__c", "Name", "VPS_Product_Type__c", "ProductNameFormula__c", "Service_Location__c", "Creation_Date__c", "Status"];
        //store table header names
        headers = ["Group Name","Quote Name", "Product", "Product Offering", "Location", "Date", "Status"];
        
        csvStringResult = "";
        csvStringResult += "Flagged?";
        csvStringResult += ",";
        csvStringResult += headers.join(',');
        csvStringResult += '\n';
        
        for(var i=0; i < quoteList.length; i++) {
            counter = 0;
            
            for(var sTempkey in keys) {
                var skey = keys[sTempkey];
                if(counter > 0) {
                    csvStringResult += ',';
                }
                //check if there are values
                if (quoteList[i][skey] != "" && quoteList[i][skey] != undefined) {
                    if (quoteList[i][skey] === "hasFlag") {
                        csvStringResult += "Yes";
                    } else {
                        csvStringResult += quoteList[i][skey];
                    }
                } else {
                    //console.log("skey was: " + skey);
                    if (skey === "flagIconName") {
                        csvStringResult += "No";
                    } else {
                        csvStringResult += "";
                    }
                }
                counter++;
            } //inner for loop close
            csvStringResult += '\n';
        } //outer main for loop close
        
        //get currentDate
        var today = new Date();
        var dd = today.getDate();
        
        var mm = today.getMonth() + 1;
        if (mm < 10) { mm = '0' + mm; }
        
        var yy = today.getFullYear();
        yy = yy.toString().substr(-2);
        today = mm + '_' + dd + '_' + yy;
        
        //create hidden element to download file and append to document
        var hiddenElement = document.createElement('a');
        hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvStringResult);
        hiddenElement.target = '_self';
        hiddenElement.download = 'QuoteWorklist_'+today+'.csv'; // You can change CSV file name, leave .csv
        document.body.appendChild(hiddenElement); // Required for FireFox browser
        hiddenElement.click(); // using click() js function to download csv file
    },
    
    
        cloneQuote : function(component,event,helper, quoteId){

        console.log('Started in CloneQuote helper  @@@');
        //var quoteId = event.currentTarget.id;
        //alert('Quote Id to cole..'+quoteId);        
        var action = component.get("c.copyquotes"); 
            console.log("quoteId"+quoteId);
        action.setParams({ "quoteId" :  quoteId  });
        action.setCallback(this, function(response) {
            //alert('successful copied '+action);             
            var state = response.getState();
             console.log('state		^^'+state);
            if (state === "SUCCESS") {
                //console.log('state		^^'+state);
                var returnedMap = JSON.parse(response.getReturnValue());
                
                console.log('returnedMap  ^^'+returnedMap);
                //alert('successful copied '+action);
                var frameUrl = '';
                var pathElements = window.location.pathname.split("/");
                if(pathElements.indexOf("Partner") != -1) {
                    frameUrl = window.location.origin + '/' + pathElements[1] + '/s/';
                } else {
                    frameUrl = window.location.origin + '/s/';
                } 				
                var encodedHash = encodeURIComponent('#');
                var encodedQuestion = encodeURIComponent('?');
                var encodedAmp = encodeURIComponent('&');
                var encodedFSlash = encodeURIComponent('/');
                var encodedEqual = encodeURIComponent('=');                                                                                         
                var navigateToUrl = '';  
                //console.log('navigateToUrl		^^'+navigateToUrl);               
                navigateToUrl = frameUrl + 'omniscriptcontainer?actionUrl=';
                navigateToUrl = navigateToUrl + encodedFSlash + 'apex' ;
                navigateToUrl = navigateToUrl + encodedFSlash + 'vlocity_cmt__OmniScriptUniversalPage' + encodedQuestion;
                navigateToUrl = navigateToUrl + 'id' + encodedEqual + returnedMap.ContextId  + encodedAmp;
                navigateToUrl = navigateToUrl + 'layout' + encodedEqual + returnedMap.layout + encodedAmp + encodedAmp;
                navigateToUrl = navigateToUrl + 'trackKey' + encodedEqual + returnedMap.trackKey + encodedAmp;
                navigateToUrl = navigateToUrl + 'omniCancelAction' + encodedEqual + returnedMap.omniCancelAction + encodedAmp;
                navigateToUrl = navigateToUrl + 'omniIframeEmbedded' + encodedEqual + returnedMap.omniIframeEmbedded + encodedAmp;
                navigateToUrl = navigateToUrl + 'isdtp' + encodedEqual + returnedMap.isdtp + encodedAmp;
                navigateToUrl = navigateToUrl + 'sfdcIFrameOrigin' + encodedEqual + encodeURIComponent(returnedMap.sfdcIFrameOrigin) + encodedAmp;
                navigateToUrl = navigateToUrl + 'sfdcIFrameHost' + encodedEqual + returnedMap.sfdcIFrameHost + encodedAmp;
                navigateToUrl = navigateToUrl + 'journeyType' + encodedEqual + 'copy' + encodedAmp;
                navigateToUrl = navigateToUrl + 'quoteIdFromWL' + encodedEqual + quoteId + encodedAmp + encodedHash;
              //  console.log('navigateToUrl		^^'+navigateToUrl);
                
                var productType = returnedMap.productType;
                console.log('Prodct type		^^'+productType);
                if(productType=='Switched Eline'|| productType=='Switched E-Line' ){ // Added By Mahesh for redirect the urls                  
                    navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
                }else if(productType == 'Internet Dedicated Ethernet'){   
					navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDE_INSTALL_QUOTE/OmniScriptSubType/IDE/'); 
				}else if(productType == 'Internet Dedicated Access'){
					navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDS_UIOS/OmniScriptSubType/IDA/');									
				}else if(productType == 'Wavelength Solutions'){                            
                     navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');                         
                }
                else if(productType=='Private IP'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/PIP/');									
				}
                else if(productType == 'Dedicated E-Line'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/DLine/');									
				}
                    else{
                	navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');     
                }
                //navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
                navigateToUrl = navigateToUrl + encodeURIComponent('OmniScriptLang/English/ContextId/') + returnedMap.ContextId;
                navigateToUrl = navigateToUrl + encodeURIComponent('/PrefillDataRaptorBundle//true');
                if(returnedMap.servicePlatform == 'VRD' || returnedMap.servicePlatform == 'Legacy'){
					navigateToUrl = navigateToUrl + encodedQuestion + 'servicePlatform' + encodedEqual + returnedMap.servicePlatform; //vrd changes
				}else{
				navigateToUrl = navigateToUrl + encodedQuestion + 'servicePlatform' + encodedEqual + returnedMap.serviceType; //chiru added service platform
				}
				
            }
            
            if(!navigateToUrl.includes('undefined')){
                //window.top.location = frameUrl;
                var urlEvent = $A.get("e.force:navigateToURL");
                urlEvent.setParams({
                    "url": navigateToUrl
                });
                urlEvent.fire();                    
            } 
        });
        $A.enqueueAction(action); 
        
    },
    
    
    updateQuoteWorkList: function (component, header) {
        //console.log("Started in updateQuoteworklist helper  @@@");
        var activeFilter = component.get('v.activeFilter');
        console.log('activeFilter helper ====> '+activeFilter);
        var header1 = component.get('v.header');
        header1 = (header1 == 'Grouplink') ? 'GroupName__c' : header1;
        console.log('header1 ====> '+header1);
        //var action = component.get('c.searchForIds');
        // if the filter is all, have quoteList use the allQuoteList instead of filtering
        if (activeFilter === 'all'){
            var all = component.get('v.allQuoteList');
            component.set("v.quoteList", all);
        }else{
            if(header1 == 'ProductNameFormula__c') {	// Change Filter value from GUI to DB
                switch(activeFilter) {
                    case 'UNI Standalone':		activeFilter = 'UNI Standalone';	break;	
                    case 'UNI/EVC Combo':		activeFilter = 'UNI/EVC Combo';	break;	//Changed for 2969_ITR_revert
                    
                    case 'EVC Standalone':		activeFilter = 'EVC Standalone';	break;
                    case 'PIP Port & Access':	activeFilter = 'PIP Port & Access';	break;
                    case 'PIP NNI Port & Access':activeFilter = 'PIP NNI Port & Access';	break;
                    default:	break;
                }                
                console.log('translated activeFilter ====> '+activeFilter);
            }
            var action = component.get('c.updateHeaderFilter');
            action.setParams({"header" : header1,
                              "value" : activeFilter,
                              "rowLimit" : component.get('v.initialRows'),
                              "rowOffset" : 0});
            action.setCallback(this, function(response) {
               
                var state = response.getState();
                 console.log("state update header" + state);
                if (state === "SUCCESS") {                
                    var records =response.getReturnValue().quotedatalst;
                    component.set("v.totalRows", response.getReturnValue().totalRecords);
                    //component.set("v.enableInfiniteLoading", true);
                   console.log('records @@@@@@: ' , JSON.stringify(records));
                    console.log("1");
                     var splitActiveFilter = activeFilter.split(' ');
                    console.log('splitActiveFilter was: ' + splitActiveFilter);
                   var isAddrFilter = false;
                    console.log('splitActiveFilter length was: ' + splitActiveFilter.length);
                    if(splitActiveFilter.length > 3){
                        isAddrFilter = true;
                    }
                    console.log('isAddrFilter was: ' + isAddrFilter);
                     console.log("2");
                    var listdata=[];
                    var serviceAddr;
                    var flagVal;
                    var display;
                    var showIcon;
					var disableCopyQuote;
                    var navigateToUrl;
                    var dgfProducts = ["VRD Dedicated E-Line Services", "VRD Switched E-Line Services", "Switched E-LAN", "VRD Internet Dedicated Ethernet Services", "VRD PIP Services"];
                    for(var i=0; i<records.length; i++){ 
                        /*if (records[i].quote.Name == 'QuoteName-3099'){
                            console.log('QuoteName-3099 is record #: ',i);
                        }*/
						 if(records[i].quote.ProductNameFormula__c != '' && !(dgfProducts.includes(records[i].quote.ProductNameFormula__c)) && records[i].disableCopy !='true'){//records[i].quote.VPS_QuoteFlag__c ===true || 
							showIcon = 'utility:copy';
								disableCopyQuote = false;
							} else{
							showIcon = '';
							disableCopyQuote = true;
							}
						
                        //showIcon=records[i].quote.VPS_QuoteFlag__c ===true ? 'action:clone' : 'action:clone';
                        display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redc' : ' blackc');
                        flagVal=records[i].quote.VPS_QuoteFlag__c ===true ? 'hasFlag' : '';
                        if(records[i].quote.ProductNameFormula__c == 'ERS PREMIER EVC' || records[i].quote.ProductNameFormula__c == 'EVC Standalone')
                        {
                            serviceAddr = records[i].quote.EVC_Full_Address__c == undefined ? (records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c) : records[i].quote.EVC_Full_Address__c;
                        }else{
                            serviceAddr = records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c;
                        }
                          console.log("3");
                        // Translate Product Offering
                       // helper.translateProductOffering(records[i]);
                         console.log("8");
                        //console.log('serviceAddr =======> '+serviceAddr);
                        //navigateToUrl='https://vpscx--vpscxmigra.my.salesforce.com';
                        //Modified the code to include status parameter
                        var frameUrl = '';
                        var pathElements = window.location.pathname.split("/");
                        if(pathElements.indexOf("Partner") != -1) {
                            frameUrl = window.location.origin + '/' + pathElements[1] + '/s/';
                        } else {
                            frameUrl = window.location.origin + '/s/';
                        }  
                        // Added for Revemp project -[SKB] for New URL Start
                           console.log("4");
                        if(records[i].quote.Omniscript_Instance_Id__c != undefined && 
                           records[i].quote.Omniscript_Instance_Id__c != null &&
                           records[i].quote.Omniscript_Instance_Id__c != '' &&
                           records[i].quote.Status != 'Pricing Review' && 
                           records[i].quote.Status != 'Pricing Updated' && !(records[i].quote.VPS_ICB__c && records[i].quote.Status == 'Complete') && !(records[i].quote.VPS_ICB__c && records[i].quote.Status == 'Expired') && (records[i].quote.VPS_ICB__c && ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT'))) && records[i].quote.Status != 'Submitted')){  
                            //Modified the code to include quote status parameter
                            navigateToUrl = frameUrl + 'resumepage?id=';
                            navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                            navigateToUrl = navigateToUrl + '&quoteStatus=';
                            //TODO: Please verify the summary URL
                            /*
                            navigateToUrl = frameUrl + 'quotesummary?quoteId=';
							navigateToUrl = navigateToUrl + records[i].quote.Id;
                            */
                            navigateToUrl = navigateToUrl + records[i].quote.Status;						
                        }else if(records[i].quote.Status == 'Open' || records[i].quote.Status == 'Finalized'){ 
                            var encodedHash = encodeURIComponent('#');
                            var encodedQuestion = encodeURIComponent('?');
                            var encodedAmp = encodeURIComponent('&');
                            var encodedFSlash = encodeURIComponent('/');
                            var encodedEqual = encodeURIComponent('=');
                            navigateToUrl = frameUrl + 'omniscriptcontainer?actionUrl=';
                            navigateToUrl = navigateToUrl + encodedFSlash + 'apex' ;
                            navigateToUrl = navigateToUrl + encodedFSlash + 'vlocity_cmt__OmniScriptUniversalPage' + encodedQuestion;
                            navigateToUrl = navigateToUrl + 'id' + encodedEqual + records[i].productId + encodedAmp;
                            navigateToUrl = navigateToUrl + 'layout' + encodedEqual + records[i].layout + encodedAmp + encodedAmp;
                            navigateToUrl = navigateToUrl + 'trackKey' + encodedEqual + records[i].trackKey + encodedAmp;
                            navigateToUrl = navigateToUrl + 'omniCancelAction' + encodedEqual + records[i].omniCancelAction + encodedAmp;
                            navigateToUrl = navigateToUrl + 'omniIframeEmbedded' + encodedEqual + records[i].omniIframeEmbedded + encodedAmp;
                            navigateToUrl = navigateToUrl + 'isdtp' + encodedEqual + records[i].isdtp + encodedAmp;
                            navigateToUrl = navigateToUrl + 'sfdcIFrameOrigin' + encodedEqual + encodeURIComponent(records[i].sfdcIFrameOrigin) + encodedAmp;
                            navigateToUrl = navigateToUrl + 'sfdcIFrameHost' + encodedEqual + records[i].sfdcIFrameHost + encodedAmp;
                            navigateToUrl = navigateToUrl + 'journeyType' + encodedEqual + 'resume' + encodedAmp;
                            navigateToUrl = navigateToUrl + 'quoteIdFromWL' + encodedEqual + records[i].quoteId + encodedAmp + encodedHash;
                            
                            //navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
							if(records[i].productCode == 'WAVE_OFR_WAVELENGTH_SOL'){
								navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');										
							}else if(records[i].productCode == 'IDE_OFR_BURSTABLESELECT' || records[i].productCode == 'IDE_OFR_TIERED'|| records[i].productCode == 'IDE_OFR_ESSENTIAL' ){
								navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDE_INSTALL_QUOTE/OmniScriptSubType/IDE/');									
							}else if(records[i].productCode == 'CORE_PL_OFR_PTP'){
								navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');									
							}else if(records[i].productCode == 'PIP_OFR_UNI' || records[i].productCode == 'PIP_OFR_NNI'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/PIP/');									
							}else{
								navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');								
							}							
                            navigateToUrl = navigateToUrl + encodeURIComponent('OmniScriptLang/English/ContextId/') + records[i].productId;
                            navigateToUrl = navigateToUrl + encodeURIComponent('/PrefillDataRaptorBundle//true');	
                        }
                            else if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.Status =='Pricing Review' || records[i].quote.Status == 'Pricing Updated' || records[i].quote.Status == 'Submitted' || records[i].quote.Status == 'Complete' || records[i].quote.Status == 'Expired')){
                                // Added for LWC -- Surendra
								if((records[i].quote.VPS_ICB__c ==true) && (records[i].quote.VPS_Quote_Type__c !='Change') && ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
									navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
									navigateToUrl = navigateToUrl + records[i].quote.Id;
								}else if(records[i].quote.VPS_ICB__c ==true && records[i].quote.VPS_Quote_Type__c =='Change'){
                                    navigateToUrl = frameUrl + 'resumepage?id=';
                                    navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                                    navigateToUrl = navigateToUrl + '&quoteStatus=';
                                    navigateToUrl = navigateToUrl + records[i].quote.Status;
                            	}
                                else{
										navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
										navigateToUrl = navigateToUrl + records[i].quote.Id;										
									
								}
                                
                            }    
                                else{
                                    // Added for LWC -- Surendra
                                    navigateToUrl = frameUrl + 'quotesummary?quoteId=';
                                    navigateToUrl = navigateToUrl + records[i].quote.Id;
                                    
                                }
                        /*
                        navigateToUrl = frameUrl + 'resumepage?id=';
                        navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                        navigateToUrl = navigateToUrl + '&quoteStatus=';
                        navigateToUrl = navigateToUrl + records[i].quote.Status; **/// END
                       // if((isAddrFilter && serviceAddr != '') || !isAddrFilter){
                          //vrd changes starts
                    if(records[i].quote.Description == 'VRD'){
                        if(records[i].quote.ProductNameFormula__c == 'IDE - Tiered'){
                            records[i].quote.ProductNameFormula__c ='IDS - Tiered';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Burstable'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Burstable';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Essential'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Essential';
                        }
                    }
                    //vrd changes ends  
                            listdata.push({
                                displayClass : display,
                                flagIconName : flagVal,
                                flagIconColor: 'red',
                                Name : records[i].quote.Name,
                                //VPS_Product_Type__c : records[i].quote.VPS_Product_Type__c,
                                VPS_Product_Type__c : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null && records[i].quote.Group__r.Catalog_Product_Relationship__r != undefined && records[i].quote.Group__r.Catalog_Product_Relationship__r != null) ? records[i].quote.Group__r.Catalog_Product_Relationship__r.Name : ((records[i].quote.Description == 'VRD')? 'Internet Dedicated +' : records[i].quote.VPS_Product_Type__c),//vrd changes
                                //ProductNameFormula__c : records[i].quote.ProductNameFormula__c,//changes done by ram.sahu
                                ProductNameFormula__c : records[i].quote.ProductNameFormula__c,
                                Service_Location__c : serviceAddr,
                                Creation_Date__c : records[i].quote.Creation_Date__c,
                                Status : records[i].quote.Status,
                                copyIconName : showIcon,
                                Copy:records[i].quote.Id,
                                //linkName : navigateToUrl,
                                linkName : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : navigateToUrl,
                                Grouplink : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : '',
                                GroupName__c : records[i].quote.GroupName__c
                            });
                       // }
                    }
                    console.log('leave for the day' , listdata);
                    component.set("v.quoteList", listdata);
                    
                }
            });
            $A.enqueueAction(action);
        }
    },
    
    
    
    translateProductOffering : function(recordHndl) {
       // debugger;
        switch(recordHndl.quote.ProductNameFormula__c) {
            case 'ERS Premier UNI':		
                recordHndl.quote.ProductNameFormula__c = 'UNI Standalone';
                break;
            case 'UNI EVC':		
                //recordHndl.quote.ProductNameFormula__c = 'UNI/EVC Combo'; Changed for 2969_ITR
               		
                recordHndl.quote.ProductNameFormula__c = 'UNI/EVC Combo';// Changed for 2969_ITR_revert
                break;
            case 'ERS PREMIER EVC':		
                recordHndl.quote.ProductNameFormula__c = 'EVC Standalone';
                break;
            case 'PIP Port & Access':		
                recordHndl.quote.ProductNameFormula__c = 'PIP Port & Access';
                break;
            case 'PIP NNI Port & Access':		
                recordHndl.quote.ProductNameFormula__c = 'PIP NNI Port & Access';
                break;
            default:	break;
        }
    },
    
    
         openModal: function(component, helper, flagDisplay) {
        
        console.log('inside openModal');
        if (flagDisplay == 'redc') {
            component.set('v.modalMessage', 'Would you like to unflag this quote?');
            component.set('v.flagAction', 'unflag');
            //console.log('isOpen', component.get('v.isOpen'));
        } else {
            component.set('v.modalMessage', 'Would you like to flag this quote?');
            component.set('v.flagAction', 'flag');
        }
        component.set('v.isOpen', true);
    },
    
    
    editFlagHelper : function(component, event, helper) {
        var flagAction = component.get('v.flagAction');
        var quoteId = component.get('v.quoteId');
        console.log('flagAction:::' + flagAction);
        var action = component.get('c.flagQuote');
        action.setParams({
            flagAction : flagAction,
            quoteId : quoteId
        });
        action.setCallback(this, function(response){
            var state = response.getState();
            /*if (state != 'SUCCESS') {
                console.log('state was:::', state);
            }*/
            if (state === 'SUCCESS') {
                $A.get('e.force:refreshView').fire();
            } else {
                console.log('state was:::', state);
            }
        });
        component.set("v.isOpen", false);
        $A.enqueueAction(action);
    }
})
