/******************************************************************************************
* Component:      VPS_QuoteWorklist_LightningDatatable
* @description    This class is used by the full worklist components and is in charge of 
*                 searching for the user's quotes and displaying them with the desired 
*                 filters and input
****************************************************************************************************************
Change Log:
11-OCT-2019      Edward Nguyen         Replace values for product offerings 
31-DEC-2019  	 Sonal Singh		   Added Navigation for Private IP Products
****************************************************************************************************************/
({
    
    doInit : function(component, event, helper) {
    //location.reload(); this is just reloading the page again and again
	// prasad changes
    
       var windowloc= window.location.href;
       var worklistURL = windowloc.includes('myworklists');
        
        if(!worklistURL){
            component.set('v.isQuote',true);
            
            console.log('isQuote@@'+component.get('v.isQuote'));
        }else{
            component.set('v.isQuote1',true);
            console.log('isQuote1@@'+component.get('v.isQuote1'));
        }
      
    },
    
    fetchQuote : function(component, event, helper) {
       // helper.getgroupFilterdata(component, event, helper);       
        helper.getServLocFilterData(component, event, helper);
       // helper.fetchQuoteHelper(component, event, helper);
    },
    sortTable : function(component, event, helper) {
        
        /* 
         * This method sorts the datatable by setting the sortBy and sortDirection 
         * attributes based on the column the user has clicked on and calls 
         * sortData() from helper. */
        
        var fieldName = event.getParam('fieldName');
        var sortDirection = event.getParam('sortDirection');
        component.set("v.sortBy", fieldName);
        component.set("v.sortDirection", sortDirection);
        helper.sortData(component, fieldName, sortDirection);
        console.log('1');
    },
    
    handleClick : function(component, event, helper) {
        var searchText = component.get('v.searchText');
        // alert("called");
        //console.log('in handleClick');
        var actions=helper.cloneQuote(helper, cmp);
        
        component.set('v.mycolumns', [
            {label: '', fieldName: 'VPS_QuoteFlag__c' , cellAttributes:
             {class: { fieldName: 'displayClass' }, iconName: { fieldName: 'flagIconName' }, iconLabel: { fieldName: 'flagIconLabel' }, iconPosition: 'right', iconcolor: {fieldName: 'flagIconColor'} }}
            ,
            {label: 'Group Name', fieldName: 'Grouplink' , type: 'url', sortable:true, cellAttributes:
             {class: { fieldName: 'displayClass' }, iconName: { fieldName: 'flagIconName' }, iconLabel: { fieldName: 'flagIconLabel' }, iconPosition: 'right', iconcolor: {fieldName: 'flagIconColor'} }},
            { label: 'Quote Name', fieldName: 'linkName', type: 'url', sortable:true, 
             typeAttributes: {label: { fieldName: 'Name' }, target: '_self'}, cellAttributes: { class: { fieldName: 'displayClass' } }},
            {label: 'Product Name', fieldName: 'ProductNameFormula__c', type: 'text', sortable:true,  cellAttributes: { class: { fieldName: 'displayClass' } }},
            {label: 'Location', fieldName: 'Service_Location__c', type: 'text', sortable:true, cellAttributes: { class: { fieldName: 'displayClass' } }},
            {label: 'Date', fieldName: 'Creation_Date__c', type: 'Date', sortable:true, cellAttributes: { class: { fieldName: 'displayClass' } }},
            {label: 'Status', fieldName: 'Status', type: 'text', sortable:true, cellAttributes: { class: { fieldName: 'displayClass' } }},           
            {label: 'Copy', fieldName: 'Copy' , type: 'action',cellAttributes:
             {class: { fieldName: 'showCopyIcon' }, iconName: { fieldName: 'copyIconName' }, iconLabel: { fieldName: 'flagIconLabel' }, iconPosition: 'right', iconcolor: {fieldName: 'flagIconColor'} }
             ,typeAttributes: { rowActions: actions }}    
            
            
        ]);
        var action = component.get('c.searchForIds');
        
        action.setParams({searchText: searchText});
        
        action.setCallback(this, function(response) {
            var state = response.getState();
            
            if (state === 'SUCCESS') {
                // console.log('response.getReturnValue().quotedatalst' + response.getReturnValue().quotedatalst);
                // console.log('response.getReturnValue()' + response.getReturnValue());
                var records =response.getReturnValue().quotedatalst;
                var listdata=[];
                var serviceAddr;
                var flagVal;
                var display;
                var showIcon;
                var creationDate, displayDate;
                var dgfProducts = ["VRD Dedicated E-Line Services", "VRD Switched E-Line Services", "Switched E-LAN", "VRD Internet Dedicated Ethernet Services", "VRD PIP Services"];
                for(var i=0; i<records.length; i++){
                    if(records[i].quote.ProductNameFormula__c != '' && !(dgfProducts.includes(records[i].quote.ProductNameFormula__c))){//records[i].quote.VPS_QuoteFlag__c ===true || 
                		showIcon = 'action:clone';
                	}  
                    else{
                    	showIcon = '';
                    }
                   // showIcon=records[i].quote.VPS_QuoteFlag__c ===true ? 'action:clone' : 'action:clone';
                    display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redc ' : 'blackc');
                    flagVal=records[i].quote.VPS_QuoteFlag__c ===true ? 'hasFlag' : '';
                    if(records[i].quote.ProductNameFormula__c == 'ERS PREMIER EVC' || records[i].quote.ProductNameFormula__c == 'EVC Standalone'){
                        serviceAddr = records[i].quote.EVC_Full_Address__c == undefined ? (records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c) : records[i].quote.EVC_Full_Address__c;
                    }else{
                    	serviceAddr = records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c;
                    }
                    creationDate=new Date(records[i].quote.Creation_Date__c);
                    //console.log(records[i].quote.VPS_Quote_Id__c);
                    displayDate=((creationDate.getMonth()+1)+'/'+creationDate.getDate()+'/'+creationDate.getFullYear().toString().substr(-2));
                       // console.log('test creation date:'+displayDate);
                        //vrd changes starts
                    if(records[i].quote.Description == 'VRD'){
                        if(records[i].quote.ProductNameFormula__c == 'IDE - Tiered'){
                            records[i].quote.ProductNameFormula__c ='IDS - Tiered';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Burstable'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Burstable';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Essential'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Essential';
                        }
                    }
                    //vrd changes ends
                    listdata.push({
                        displayClass : display,
                        flagIconName : flagVal,
                        Name : records[i].quote.Name,
                        //VPS_Product_Type__c : records[i].quote.VPS_Product_Type__c,
						VPS_Product_Type__c : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null && records[i].quote.Group__r.Catalog_Product_Relationship__r != undefined && records[i].quote.Group__r.Catalog_Product_Relationship__r != null) ? records[i].quote.Group__r.Catalog_Product_Relationship__r.Name : ((records[i].quote.Description == 'VRD')? 'Internet Dedicated +' : records[i].quote.VPS_Product_Type__c),//vrd changes
                        ProductNameFormula__c : records[i].quote.ProductNameFormula__c,//changes done by ram.sahu
                        Service_Location__c : serviceAddr,
                        Creation_Date__c : records[i].quote.Creation_Date__c,
                        Status : records[i].quote.Status,
                        copyIconName : showIcon,
                        Copy:records[i].quote.Id,
                        linkName : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : navigateToUrl+records[i].quote.Omniscript_Instance_Id__c,
                        Grouplink : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : '',
                        GroupName__c: records[i].quote.GroupName__c,
                    });
                    
                }
                component.set("v.quoteList", listdata);
            }
        });
        $A.enqueueAction(action);
    },
    
   downloadWorklist : function(component, event, helper) {
        var worklist = component.get("v.quoteList");
        helper.downloadQuotes(component, worklist);
    },
    //Added for row action
    handleRowAction: function (component, event, helper) {
        var action = event.getParam('action');
        var row = event.getParam('row');
        console.log('row', row);
        console.log('row action:::', action.name);
        if(action.name == 'copyQuote'){
            //debugger;
            var quoteId = row.Copy;
            helper.cloneQuote(component, event, helper, quoteId);
        }  else if(action.name == 'flagClick') {
            //console.log('flagIconName', row.flagIconName);
            var flagDisplay = row.displayClass;
            console.log('displayClass::::', flagDisplay);
            component.set('v.quoteId', row.Copy);
            helper.openModal(component, helper, flagDisplay);
        }
    },

    handleHeaderAction: function (cmp, event, helper) {
        //clear any filters except header
        cmp.set("v.currentCount", cmp.get("v.initialRows"));
        cmp.set("v.filter", '');
        cmp.set("v.selectedCompany", 'None');
        cmp.set("v.selectedOwner" ,'None');
        cmp.set("v.selectedProduct", 'None');
        cmp.find("companyFilter").set("v.value",'');
        cmp.find("ownerFilter").set("v.value",'');
        cmp.find("productFilter").set("v.value", '');
        
        // Retrieves the name of the selected filter
        var actionName = event.getParam('action').name;
        console.log('actionName: ' + actionName); 
        // Retrieves the current column definition
        // based on the selected filter
        var colDef = event.getParam('columnDefinition');
         console.log('colDef: ' + colDef); 
        var columns = cmp.get('v.mycolumns');
        console.log('columns: ' + JSON.stringify(columns));  
        var activeFilter = cmp.get('v.activeFilter');
        var header = colDef.fieldName;
        cmp.set('v.header', header);
        console.log('header: ' + header); 
        console.log('activeFilter ===========> ' + activeFilter);
        if (actionName !== activeFilter) {
            var idx = columns.indexOf(colDef);
            //var idx = 2;
            console.log('idx: ' + idx); 
            // Update the column definition with the updated actions data
            var actions = columns[idx].actions;
            console.log('actions11: ' + actions); 
            actions.forEach(function (action) {
                action.checked = action.name === actionName;
            });
            cmp.set('v.activeFilter', actionName); 
            console.log('actionName@: ' + cmp.get('v.actionName')); 
            helper.updateQuoteWorkList(cmp, helper, header);
            cmp.set('v.mycolumns', columns);
        }
    },
    // controller functionality for advanced search
    updateFilter: function(component, event, helper) {
        if(event.getParams().keyCode == 13 || event.getSource().getLocalId() == "searchButton"){
            var myEvent = $A.get("e.c:SearchKeyChange");
            var filter = component.get("v.filter");
            console.log('====8888===>'+filter);
            if(filter.length>=3){
                //clear all filters except search
                component.set("v.activeFilter", 'all');
                component.set("v.header", '');
                component.set("v.selectedOwner", 'None');
                component.set("v.selectedCompany", 'None');
                component.set("v.selectedProduct", 'None');
                component.find("companyFilter").set("v.value",'');
                component.find("ownerFilter").set("v.value", '');
                component.find("productFilter").set("v.value", '');
                component.set("v.currentCount",component.get("v.initialRows"));
                component.set("v.SearchFlg",true);//[SWARS][for searching in service location]
                myEvent.setParams({"searchKey": filter});
                myEvent.fire();
            }
            else if(filter.length===0){
                myEvent.setParams({"searchKey": ''});
                myEvent.fire();
                
            }
        }
    },
    search: function(component, event, helper) {
        var myEvent = $A.get("e.c:SearchKeyChange");
        var filter = component.get("v.filter");
        console.log('====8888===>'+filter);
        if(event.getParams().keyCode == 13){
            if(filter.length>=3){
                component.set("v.SearchFlg",true);//[SWARS][for searching in service location]
                myEvent.setParams({"searchKey": filter});
                myEvent.fire();
        	}
            else if(filter.length===0){
                myEvent.setParams({"searchKey": ''});
                myEvent.fire();
        }
        }
    },
    
    showSpinner: function(component, event, helper) {
        component.set("v.Spinner", true); 
    },
    hideSpinner : function(component,event,helper){
        component.set("v.Spinner", false);
    },  
    
    //Start of David's functions
    //The following three functions set the respective attribute to the selected value in the dropdown
    //for use in the updateQuotes function
    
    
    updateCompany : function(component, event, helper) {
        var value = event.getParam("value");
        component.set("v.selectedCompany", value);
    },
    
    updateOwner : function(component, event, helper) {
        var value = event.getParam("value");
        component.set("v.selectedOwner", value);
    },
    
    updateProduct : function(component, event, helper) {
        var value = event.getParam("value");
        component.set("v.selectedProduct", value);
    },
    
    //Calls updateRecords to only show records requested by the dropdown filters in the datatable
    updateQuotes : function(component, event, helper) {
        //reset currentCount and InfiniteLoading every time new filter is applied for lazy loading
        //clear all filters except advanced search
		component.set("v.Spinner", true); //kc									  
        component.set("v.currentCount", component.get("v.initialRows"));
        component.set("v.enableInfiniteLoading", true);
		component.set("v.filter", '');
        component.set("v.header", '');
        component.set("v.activeFilter", 'all');        
        console.log("company@@@"+component.get("v.selectedCompany"));
        console.log("selectedOwner@@@"+component.get("v.selectedOwner"));
        console.log("selectedProduct@@@"+component.get("v.selectedProduct"));
        
        var action = component.get('c.updateRecords');
        action.setParams({"company": component.get("v.selectedCompany"),
                          "owner": component.get("v.selectedOwner"),
                          "product": component.get("v.selectedProduct"),
                          "rowLimit": component.get("v.initialRows"), 
                          "rowOffset": 0
                         });
        
        action.setCallback(this,function(response){
            var state = response.getState();
            console.log("state1234"+state);
            if(state === 'SUCCESS'){
                //Needed to format records returned by the updateRecords function
                var records =response.getReturnValue().quotedatalst;
                component.set("v.totalRows", response.getReturnValue().totalRecords);
                console.log("totalRows advancedSearch: ", response.getReturnValue().totalRecords);
                var listdata=[];
                var serviceAddr;
                var flagVal;
                var display;
                var showIcon;
                var navigateToUrl;
                var dgfProducts = ["VRD Dedicated E-Line Services", "VRD Switched E-Line Services", "Switched E-LAN", "VRD Internet Dedicated Ethernet Services", "VRD PIP Services"];
                console.log('records.length' + records.length);
                //Revamp - Filter fix start
                var frameUrl = '';
                var pathElements = window.location.pathname.split("/");
                if(pathElements.indexOf("Partner") != -1) {
                    frameUrl = window.location.origin + '/' + pathElements[1] + '/s/';
                } else {
                    frameUrl = window.location.origin + '/s/';
                } 
				//Revamp - Filter fix end                
                for(var i=0; i<records.length; i++){ 
                	showIcon = '';
                
                	if(records[i].quote.VPS_QuoteFlag__c == true  || records[i].quote.ProductNameFormula__c != '' && !(dgfProducts.includes(records[i].quote.ProductNameFormula__c))){
                		showIcon = 'utility:copy';
                	}
                    //showIcon=records[i].quote.VPS_QuoteFlag__c ===true ? 'utility:copy' : 'utility:copy';
                    display = (records[i].quote.VPS_QuoteFlag__c===true ? 'redc' : 'blackc');
                    flagVal=records[i].quote.VPS_QuoteFlag__c ===true ? 'hasFlag' : '';
                    if(records[i].quote.ProductNameFormula__c == 'ERS PREMIER EVC' || records[i].quote.ProductNameFormula__c == 'EVC Standalone'){
                        serviceAddr = records[i].quote.EVC_Full_Address__c == undefined ? (records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c) : records[i].quote.EVC_Full_Address__c;
                    }else{
                    	serviceAddr = records[i].quote.QuoteLineItems == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r == undefined ? '' : records[i].quote.QuoteLineItems[0].Service_Location__r.uspsAddressExternal__c;
                    }
                    // Krishna's fix on worklist apply filter 1/14
                    if(records[i].quote.Omniscript_Instance_Id__c != undefined && 
                       records[i].quote.Omniscript_Instance_Id__c != null &&
                       records[i].quote.Omniscript_Instance_Id__c != '' && records[i].quote.VPS_Quote_Type__c !='QuickOrder'){
                        
                        
                        if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.Status =='Pricing Review' || records[i].quote.Status == 'Complete'|| records[i].quote.Status == 'Expired' || records[i].quote.Status == 'Pricing Updated' || records[i].quote.Status == 'Submitted')){
							//Added For LWC URL - ICB 
							if((records[i].quote.VPS_ICB__c ==true) && (records[i].quote.VPS_Quote_Type__c =='Change') && ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
								navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
								navigateToUrl = navigateToUrl + records[i].quote.Id;								
							}else if(records[i].quote.VPS_ICB__c ==true && (records[i].quote.VPS_Quote_Type__c =='Change' || records[i].quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + records[i].quote.Status;
                            }
                            else{
								navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
								navigateToUrl = navigateToUrl + records[i].quote.Id;
							}
						}
                        else{
                        //Modified the code to include quote status parameter
                        navigateToUrl = frameUrl + 'resumepage?id=';
                        navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                        navigateToUrl = navigateToUrl + '&quoteStatus=';
                        //ITR 3445 start -- to handle summary screen for completed and expired quotes
                        var qStatus =  records[i].quote.Status;
                        if(qStatus == 'Expired' || qStatus == 'Complete'){
                            qStatus = 'Submitted';
                        } 
                        navigateToUrl = navigateToUrl + qStatus;
                        //ITR 3445 end
                        }
    					if(records[i].quote.VPS_ICB__c ==true && records[i].quote.Status =='Open'){
							navigateToUrl = frameUrl + 'resumepage?id=';
                            navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                            navigateToUrl = navigateToUrl + '&quoteStatus=';
                            navigateToUrl = navigateToUrl + records[i].quote.Status;
						}
                    }
                    else if((records[i].quote.Status == 'Open' || records[i].quote.Status == 'Finalized') && records[i].quote.VPS_Quote_Type__c !='QuickOrder'){ 
                        var encodedHash = encodeURIComponent('#');
                        var encodedQuestion = encodeURIComponent('?');
                        var encodedAmp = encodeURIComponent('&');
                        var encodedFSlash = encodeURIComponent('/');
                        var encodedEqual = encodeURIComponent('=');
                        navigateToUrl = frameUrl + 'omniscriptcontainer?actionUrl=';
                        navigateToUrl = navigateToUrl + encodedFSlash + 'apex' ;
                        navigateToUrl = navigateToUrl + encodedFSlash + 'vlocity_cmt__OmniScriptUniversalPage' + encodedQuestion;
                        navigateToUrl = navigateToUrl + 'id' + encodedEqual + records[i].productId + encodedAmp;
                        navigateToUrl = navigateToUrl + 'layout' + encodedEqual + records[i].layout + encodedAmp + encodedAmp;
                        navigateToUrl = navigateToUrl + 'trackKey' + encodedEqual + records[i].trackKey + encodedAmp;
                        navigateToUrl = navigateToUrl + 'omniCancelAction' + encodedEqual + records[i].omniCancelAction + encodedAmp;
                        navigateToUrl = navigateToUrl + 'omniIframeEmbedded' + encodedEqual + records[i].omniIframeEmbedded + encodedAmp;
                        navigateToUrl = navigateToUrl + 'isdtp' + encodedEqual + records[i].isdtp + encodedAmp;
                        navigateToUrl = navigateToUrl + 'sfdcIFrameOrigin' + encodedEqual + encodeURIComponent(records[i].sfdcIFrameOrigin) + encodedAmp;
                        navigateToUrl = navigateToUrl + 'sfdcIFrameHost' + encodedEqual + records[i].sfdcIFrameHost + encodedAmp;
                        navigateToUrl = navigateToUrl + 'journeyType' + encodedEqual + 'resume' + encodedAmp;
                        navigateToUrl = navigateToUrl + 'quoteIdFromWL' + encodedEqual + records[i].quoteId + encodedAmp + encodedHash;
                        console.log('Product****'+JSON.stringify(records[i].quote.VPS_Product_Type__c));
                        /*if(records[i].quote.VPS_Product_Type__c=='Switched Eline'){
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');
                        }else if(records[i].quote.VPS_Product_Type__c=='Wavelength Solutions'){
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');
                            
                        }
                        else{
                            navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');
                            
                        }*/
						if(records[i].productCode == 'WAVE_OFR_WAVELENGTH_SOL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/WAVE/');										
						}else if(records[i].productCode == 'IDE_OFR_BURSTABLESELECT' || records[i].productCode == 'IDE_OFR_TIERED' || records[i].productCode == 'IDE_OFR_ESSENTIAL'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDE_INSTALL_QUOTE/OmniScriptSubType/IDE/');									
						}else if(records[i].productCode == 'IDS_OFFER_IDA'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_IDS_UIOS/OmniScriptSubType/IDA/');									
						}else if(records[i].productCode == 'CORE_PL_OFR_PTP'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/MPL/');									
						}else if(records[i].productCode == 'PIP_OFR_UNI' || records[i].productCode == 'PIP_OFR_NNI'){
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/PIP/');
                        }else{
							navigateToUrl = navigateToUrl + encodeURIComponent('/OmniScriptType/VPS_vTLS_UIOS/OmniScriptSubType/TLS_UI/');								
						}						
                        navigateToUrl = navigateToUrl + encodeURIComponent('OmniScriptLang/English/ContextId/') + records[i].productId;
                        navigateToUrl = navigateToUrl + encodeURIComponent('/PrefillDataRaptorBundle//true');	
                    }else if (records[i].quote.VPS_ICB__c ==true && (records[i].quote.Status =='Pricing Review' || records[i].quote.Status == 'Pricing Updated' || records[i].quote.Status == 'Submitted' || records[i].quote.Status == 'Complete' || records[i].quote.Status == 'Expired')) {
                        //Added For LWC URL - ICB 
						if((records[i].quote.VPS_ICB__c ==true) && (records[i].quote.VPS_Quote_Type__c =='Change')  && ((records[i].ServiceType && records[i].ServiceType.toUpperCase().includes('VZT')) || (records[i].quote.VPS_ServiceType__c && records[i].quote.VPS_ServiceType__c.toUpperCase().includes('VZT')))){
							navigateToUrl = frameUrl + 'icbquotesummaryvzt?quoteId=';
							navigateToUrl = navigateToUrl + records[i].quote.Id;
						}else if(records[i].quote.VPS_ICB__c ==true && ( records[i].quote.VPS_Quote_Type__c =='Change' ||records[i].quote.VPS_Quote_Type__c =='Move')){
                                navigateToUrl = frameUrl + 'resumepage?id=';
                                navigateToUrl = navigateToUrl + records[i].quote.Omniscript_Instance_Id__c;
                                navigateToUrl = navigateToUrl + '&quoteStatus=';
                                navigateToUrl = navigateToUrl + records[i].quote.Status;
                            }
                        else{
							navigateToUrl = frameUrl + 'icbquotesummary?quoteId=';
							navigateToUrl = navigateToUrl + records[i].quote.Id;
						}
                        
                    }
                    //For quick order EVPL
                    else if (records[i].quote.VPS_Quote_Type__c =='QuickOrder'){
                        navigateToUrl = frameUrl + 'evplsummary?quoteId=';
                        navigateToUrl = navigateToUrl + records[i].quote.Id;
                    }
                    else{
                        //Added For LWC URL - Surendra
                        navigateToUrl = frameUrl + 'quotesummary?quoteId=';
                        navigateToUrl = navigateToUrl + records[i].quote.Id;
                    }
                    
                    
                    //navigateToUrl= component.get('v.DomainUrl')+'/resumepage?id=';
                    //console.log("records[i].quote.Name@@@"+records[i].quote.Name);
                    //console.log("records[i]@@@@"+records[i]);
                    //console.log("records[i]@@@"+ JSON.stringify(records[i]));
                                
                    //console.log("records[i].quote.Omniscript_Instance_Id__c @@@"+records[i].quote.Omniscript_Instance_Id__c);
                    //vrd changes starts
                    if(records[i].quote.Description == 'VRD'){
                        if(records[i].quote.ProductNameFormula__c == 'IDE - Tiered'){
                            records[i].quote.ProductNameFormula__c ='IDS - Tiered';
                        }
                        else if(records[i].quote.ProductNameFormula__c == 'IDE - Burstable'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Burstable';
                        }
                         else if(records[i].quote.ProductNameFormula__c == 'IDE - Essential'){
                            records[i].quote.ProductNameFormula__c = 'IDS - Essential';
                        }
                    }
                    //vrd changes ends
                    listdata.push({
                        displayClass : display,
                        flagIconName : flagVal,
                        flagIconColor: 'red',
                        Name : records[i].quote.Name,
                        //VPS_Product_Type__c : records[i].quote.VPS_Product_Type__c,
						VPS_Product_Type__c : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null && records[i].quote.Group__r.Catalog_Product_Relationship__r != undefined && records[i].quote.Group__r.Catalog_Product_Relationship__r != null) ? records[i].quote.Group__r.Catalog_Product_Relationship__r.Name : ((records[i].quote.Description == 'VRD')? 'Internet Dedicated +' : records[i].quote.VPS_Product_Type__c),//vrd changes
                        ProductNameFormula__c : records[i].quote.ProductNameFormula__c,//changes done by ram.sahu
                        Service_Location__c : serviceAddr,
                        Creation_Date__c : records[i].quote.Creation_Date__c,
                        Status : records[i].quote.Status,
                        copyIconName : showIcon,
                        Copy:records[i].quote.Id,
                        linkName : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : navigateToUrl+records[i].quote.Omniscript_Instance_Id__c,
                        Grouplink : (records[i].quote.Group__r != undefined && records[i].quote.Group__r != null) ? (frameUrl+'multilocquote?recordId=' +records[i].quote.Group__r.Group_Id__c) : '',
                        GroupName__c: records[i].quote.GroupName__c                  
                    });
                    
                }
                component.set("v.quoteList", listdata);
            }
            else{
                console.log('State was: ' + state);
            }
			component.set("v.Spinner", false); //kc									   
        });
        $A.enqueueAction(action);
    }, 
    
    //Adds values to all three filters based on the Id of the logged in User
    //Company: CLE - ACNA format based on account with which user is associated
    //Owner: Name based on other users associated with the user's account
    //Product: Product Name based on prodduct tpes on quotes associated with the account
    populateFilters : function(component,event,helper){
        var action = component.get("c.getAccounts");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if(state === "SUCCESS")
            {
                var accounts = response.getReturnValue();
                var result= [];
                for(var i=0;i<accounts.length;i++)
                {
                    var option = {
                        "label" : accounts[i].VPS_CLE_NAME__c + " - " + accounts[i].Name,
                        "value" : accounts[i].Id
                    };
                    result.push(option);
                }
                var option = {
                    "label" : "All",
                    "value" : "None"
                };
                result.push(option);
                component.set("v.companyOptions", result);
            }
            else
            {
                console.log("State was: " + state);
            }
        });
        $A.enqueueAction(action);
        
        var action = component.get("c.getUsers"); 
        action.setCallback(this, function(response) {
            var state = response.getState();		  	
            if(state === "SUCCESS")					  	
            {										  	
                var Users = response.getReturnValue();  
                //Users.sort((a, b) => (a.Name > b.Name) ? 1 : -1)//new
				Users.sort((a, b) => a.Name.localeCompare(b.Name));
                var result = [];
                for(var i=0;i<Users.length;i++)
                {
                    var option = {
                        //"label" : "Owner - " + Users[i].Name,
                        "label" : Users[i].Name,
                        "value" : Users[i].Id
                    };
                    result.push(option);
                }
                var option = {
                    "label" : "All",
                    "value" : "None"
                }
                result.push(option);
                component.set("v.ownerOptions", result);
            }
            else
            {
                console.log("State was " + state);
            }
        });
        $A.enqueueAction(action);
        
        var action = component.get("c.getProducts");
        action.setCallback(this, function(response) {
            var state = response.getState();
            if(state === "SUCCESS")
            {
                var result = [];
                var products = response.getReturnValue();
                
                for(var i=0;i<products.length;i++)
                {
                    var option = {
                        "label" : products[i],
                        "value" : products[i]
                    }
                    result.push(option);
                }
                
                var option = {
                    "label":"All",
                    "value":"None"
                };
                result.push(option);
                component.set("v.productOptions", result);
            }
            else
            {
                console.log("State was: " + state);
            }
        });
        $A.enqueueAction(action);
        
    },
    
    handleLoadMore : function(component, event, helper) {
        //debugger;
      // alert('onfilter');
        console.log("totalRows handleloadmore: ", component.get("v.totalRows"));
        console.log("currentCount handleloadmore: ", component.get("v.currentCount"));
        if(!(component.get("v.currentCount") >= component.get("v.totalRows"))){
            //To display the spinner
            //event.getSource().set("v.isLoading", true);
            //To handle data returned from Promise function
            console.log("before loadData helper");
            helper.loadData(component, event, helper).then(function(data) {
                console.log("after loadData helper");
                var currentData = component.get("v.quoteList");
                console.log("currentData@@"+currentData);
                //console.log("component sortDirection: ", component.get("v.sortDirection"));
                if(component.get("v.sortDirection") != true) {
                    console.log("cx1@@");
                    var sortedBy = component.get("v.sortBy");
                	var sortDirection = component.get("v.sortDirection");
                    var reverse = sortDirection !== 'asc';
                    var newData = currentData.concat(data);
                    //console.log("before sort: ", newData);
                    sortedBy = (sortedBy == 'linkName') ? 'Name' : (sortedBy == 'Grouplink') ? 'GroupName__c' : sortedBy;    // Handle Hyperlink field
                    newData.sort(helper.sortBy(sortedBy, reverse));
                } else {
                    console.log("cx2@@");
                    var newData = currentData.concat(data);
                }
                component.set("v.quoteList", newData);
                console.log("current w/ new: ", component.get("v.quoteList"));
                //To hide the spinner
                event.getSource().set("v.isLoading", false);
            });
            
        } else {
            console.log("cx21else@@");
            //To stop loading more rows
            component.set("v.enableInfiniteLoading", false);
            event.getSource().set("v.isLoading", false);
            console.log("not loading more");
        }
    }, //end handleLoadMore
    
    //End of David's functions
        clearfilter: function(component, event, helper) {
        
        var myEvent = $A.get("e.c:SearchKeyChange");
        var filter = component.get("v.filter");
        //console.log('====8888===>'+filter);
       	var headerFilter = component.get("v.activeFilter");
        //console.log("headerFilter clear: " + headerFilter);
        var filter = component.get("v.filter");
        //console.log('====clearFilter===>'+filter);
        var myEvent = $A.get("e.c:SearchKeyChange");
        //console.log('====Event clearFilter===>', myEvent);
            
        myEvent.setParams({"searchKey": ''});
        component.set("v.filter",'');
        component.set("v.currentCount", component.get("v.initialRows"));
        component.set("v.enableInfiniteLoading", true);
        component.set("v.filter",'');
        component.set("v.activeFilter",'all');
        component.set("v.header", '');
        component.set("v.selectedOwner", 'None');
        component.set("v.selectedOwner", 'None');
        component.set("v.selectedProduct", 'None');
        component.find("companyFilter").set("v.value", '');
        component.find("ownerFilter").set("v.value", '');
        component.find("productFilter").set("v.value", '');
        myEvent.fire();         
    },

    editFlag : function(component, event, helper) {
        helper.editFlagHelper(component, event, helper);
    },

    closeModal : function(component, event, helper) {
        component.set("v.isOpen", false);
    },
})
